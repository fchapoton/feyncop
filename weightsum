#!/usr/bin/env python

""" - Main program code for "weightsum" - A program to sum the 
combinatorial weights of a list of Feynman diagrams. 

This program is part of the feyncop/feyngen package.
"""

# See also: http://people.physik.hu-berlin.de/~borinsky/

__author__ = "Michael Borinsky"
__email__ = "borinsky@physik.hu-berlin.de"
__copyright__ = "Copyright (C) 2014 Michael Borinsky"
__license__ = "MIT License"
__version__ = "1.0"

# Copyright (c) 2014 Michael Borinsky

# Permission is hereby granted, free of charge, to any person obtaining a copy 
# of this software and associated documentation files (the "Software"), to 
# deal in the Software without restriction, including without limitation the 
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or 
# sell copies of the Software, and to permit persons to whom the Software is 
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in 
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
# IN THE SOFTWARE.

# If you have problems using this program, 
# please feel free to contact me!
# March 2014

from fractions import *
import copy
import argparse
import sys
import collections
from math import *
from stuff import *

import parsefg

from graph import Graph
from hopf_graph import HopfGraph

def main():
    """Main program section. Reads the options and parameters and starts the 
        relevant subroutines."""

    parser = argparse.ArgumentParser(description='Sum the symmetry factors of a list of diagrams')
    parser.add_argument('-u', '--non_leg_fixed', dest='non_leg_fixed', action='store_true', help='Input non-leg-fixed graphs. I.e. external legs of graphs are not given with leg labels. (default: false)')
    parser.add_argument('-w', '--no_warning', dest='no_warning', action='store_true', help='Do not print warnings. (default: false)')
    args = parser.parse_args()
        
    string = ""
    try:
        string = next(sys.stdin)
    except StopIteration:
        return

    var_name,ev,el = parsefg.parse_var_name(string)
    if var_name:
        string = string[el:]

    graphs_fac = frozenset((g,fac,ym) for g,fac,ym in parsefg.parse_input_lines( sys.stdin, None, string ))

    sum_fac = Fraction(0,1)
    for g, fac, ym in graphs_fac:
        g_sym = 0
        if not args.non_leg_fixed:
            g_sym = next(g.permute_external_edges()).unlabeled_graph.symmetry_factor
        else:
            g_sym = g.unlabeled_graph.symmetry_factor
            
        if Fraction(1,g_sym) != Fraction(fac,1) and not args.no_warning:
             sys.stderr.write("Warning: %s doen't have symmetry factor %s. It has %s. (Non-)Fixed legs?\n" % (g, fac, Fraction(1,g_sym)))
        sum_fac += fac

    print("%s" % sum_fac)
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("")
        print("Cancelled")
