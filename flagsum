#!/usr/bin/env python2.7

""" - Main program code for "flagsum" - A program to count the number of 
flags of Feynman graphs. 

This program is part of the feyncop/feyngen package.
"""

# See also: http://people.physik.hu-berlin.de/~borinsky/

__author__ = "Michael Borinsky"
__email__ = "borinsky@physik.hu-berlin.de"
__copyright__ = "Copyright (C) 2014 Michael Borinsky"
__license__ = "MIT License"
__version__ = "1.0"

# Copyright (c) 2014 Michael Borinsky

# Permission is hereby granted, free of charge, to any person obtaining a copy 
# of this software and associated documentation files (the "Software"), to 
# deal in the Software without restriction, including without limitation the 
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or 
# sell copies of the Software, and to permit persons to whom the Software is 
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in 
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
# IN THE SOFTWARE.

# If you have problems using this program, 
# please feel free to contact me!
# March 2014

from fractions import *
from fractions import Fraction as F
import copy
import argparse
import sys
import collections, itertools
from math import *
from stuff import *

import parsefg, outputfg

from graph import Graph
from hopf_graph import HopfGraph

def main():
    """Main program section. Reads the options and parameters and starts the 
        relevant subroutines."""

    parser = argparse.ArgumentParser(description='Count the number of flags for each graph')
    parser.add_argument('-w', '--weighted', dest='weighted', action='store_true', help='Calc weights')
    args = parser.parse_args()
        
    string = ""
    try:
        string = next(sys.stdin)
    except StopIteration:
        return

    var_name,ev,el = parsefg.parse_var_name(string)
    if var_name:
        string = string[el:]

    def numberofflags( g, weighted ):
        _, cycles_edges = g.cycle_decomposition( g.edges_set )


        if weighted:
            return numberofflags_int_weighted( g, g.internal_edges_set, cycles_edges )
        else:
            return numberofflags_int( g, g.internal_edges_set, cycles_edges )

    def numberofflags_int( g, sub_edges, cycles_edges ):
        if len(cycles_edges) == 1:
            return 1

        res = 0
        E = len(sub_edges)
        for l in range(1, E):
            for se in itertools.combinations(sub_edges, l):
                subsub_edges = frozenset(se)
                _, sub_cycles = g.cycle_decomposition( subsub_edges )
                if len(sub_cycles) == len(cycles_edges)-1 and g.is_edge_2_connected_sub_edges(subsub_edges):
                    res+= numberofflags_int( g, subsub_edges, sub_cycles )
                
        return res

    def numberofflags_int_weighted( g, sub_edges, cycles_edges ):
        E = len(sub_edges)
        if len(cycles_edges) == 1:
            if E-2 <= 0:
                return 0
            else:
                return F(1,E -2)

        res = 0
        for l in range(1, E):
            for se in itertools.combinations(sub_edges, l):
                subsub_edges = frozenset(se)
                _, sub_cycles = g.cycle_decomposition( subsub_edges )
                if len(sub_cycles) == len(cycles_edges)-1 and g.is_edge_2_connected_sub_edges(subsub_edges):
                    res+= numberofflags_int_weighted( g, subsub_edges, sub_cycles )

        if sub_edges == g.internal_edges_set:
            return res
        elif (len(sub_edges)-2*len(cycles_edges)) == 0:
            return 0
        else:
            return F(res,(len(sub_edges)-2*len(cycles_edges))) 

    graphs_fac = ( (numberofflags(g, args.weighted),g,fac,ym) for g,fac,ym in parsefg.parse_input_lines( sys.stdin, None, string ))

    for flags, g, fac, ym in sorted(graphs_fac):
        g_str = g.get_graph_str( ym )
        if g_str:
            print outputfg.get_element_str( g_str, fac*flags )

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print ""
        print "Cancelled"
