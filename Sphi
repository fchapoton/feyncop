#!/usr/bin/env python

""" - Main program code for "Sphi".

This program is part of the feyncop/feyngen package.
"""

# See also: http://people.physik.hu-berlin.de/~borinsky/

__author__ = "Michael Borinsky"
__email__ = "borinsky@physik.hu-berlin.de"
__copyright__ = "Copyright (C) 2014 Michael Borinsky"
__license__ = "MIT License"
__version__ = "1.0"

# Copyright (c) 2014 Michael Borinsky

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

# If you have problems using this program,
# please feel free to contact me!
# March 2014

# from fractions import *
# import argparse
import sys
# from math import *
# from stuff import *

import parsefg
import outputfg

# from graph import Graph
# from hopf_graph import HopfGraph


def main():
    """Main program section. Reads the options and parameters and starts the
        relevant subroutines."""

    # parser = argparse.ArgumentParser(description='')
    # args = parser.parse_args()

    string = ""
    try:
        string = next(sys.stdin)
    except StopIteration:
        return

    var_name, ev, el = parsefg.parse_var_name(string)
    endsc = False
    if var_name:
        sys.stdout.write("%s_Sphi%s" % (var_name, string[ev:]))
        string = string[el:]
        endsc = True

    S_g = dict()
    corad_g = dict()
    for g, tp, fac, ym in parsefg.parse_input_lines(sys.stdin, None, string,
                                                    parsefg.parse_sum_of_graph_with_tp):
        gu = g.unlabeled_graph
        if gu in S_g:
            continue

        maxf_count = 0
        if len(tp) == 0:
            corad_g[gu] = 1
            S_g[gu] = -1
        else:
            max_corad = 0
            S_g[gu] = -1
            for (sgs, r_g), m in tp.items():
                ru = r_g.unlabeled_graph
                r_cr = corad_g[ru]
                if r_cr == 1:
                    maxf_count += m
                print("%d*(" % m,)
                for sg, e in sgs:
                    res_type = "e^%d" % e if sg.residue_type == (2, 2) else "v^%d" % e
                    print(res_type,)
                print(")",)

                max_corad = max(max_corad, r_cr)
                S_g[gu] += -m * S_g[ru]

            corad_g[gu] = max_corad + 1

        g_str = g.get_graph_str(ym)
        res_type = "e" if g.residue_type == (2, 2) else "v"
        ce, _ = g.cycle_decomposition(g.edges_set)

        print("\t",)
        print(res_type, len(ce), maxf_count, corad_g[gu], outputfg.get_element_str(g_str, fac * S_g[gu]))
    if endsc:
        print(";")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("")
        print("Cancelled")
